4. Diskutér hvordan den genererte koden er i forhold til koden som din gruppe implementerte i prosjektoppgaven.
For eksempel, hvilke klasser/tabeller er like/forskjellige og hvordan, osv.


Generert Java-kode:

Med tanke på at dette er basert på domenemodellen og ikke klassediagram, så tar ikke den genererte koden høyde for metoder/funksjoner vi brukte og som kobler klassene sammen.

Det er også kommet veldig mange boolean verdier som vi aldri har brukt eller noensinne ville hatt bruk for.

Det er heller ingen servlets, men det kan brukes som et utgangspunkt for grunnmuren i prosjektet vårt.

Generert SQL-kode:


SQL-koden som ble generert er veldig lik den vi brukte, bare at
den har generert et table for hver klasse, noe vi ikke hadde bruk for.

Vi brukte kun table for User, Stand og Standrating. Den har valgt samme
primærnøkler og korrekte fremmednøkler, utenom i standrating hvor vi brukte
kombinert PK (standid, tlf) slik at hver bruker kan stemme på mer enn èn stand.


Generert JSON-kode:

JSON er et alternativ vi kunne brukt til databaselagring. Hvis vi hadde hatt tid til å sette
oss inn i det, ville det vært en mye lettere løsning enn en SQL-database. Med en enkel
JSON-parser kunne vi fått dataene ut av filen(e).

Den har generert mye overflødig kode for "tables" vi ikke bruker, samt overflødige "traceColors" og lignende.  



##For tilstandsdiagram:

Vi har også generert kode for tilstandsdiagrammet, men disse genererte kodene har ingen logikk. SQL blir for eksempel:

CREATE DATABASE IF NOT EXISTS `gruppe_22`;
USE `gruppe_22`;

CREATE TABLE IF NOT EXISTS `gruppe_22`.`expo`

(

status ENUM('qr', 'standliste', 'stand', 'logginn', 'registrering', 'rating', 'jury', 'juryfunksjoner', 'endre_stand', 'leggtil_stand', 'poengtavle'),

PRIMARY KEY(status)

);


Generert Java-kode og JSON-kode er like lite informative. Det er ikke i nærheten av nok til å i det hele tatt ligne på noe av det vi hadde. 